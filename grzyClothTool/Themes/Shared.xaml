<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:system="clr-namespace:System;assembly=netstandard"
                    xmlns:icons="clr-namespace:Material.Icons.WPF;assembly=Material.Icons.WPF"
                    xmlns:converters="clr-namespace:grzyClothTool.Converters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />
    <converters:FilePathToShortVersionConverter x:Key="FilePathToShortVersionConverter" />

    <system:Double x:Key="DisabledOpacity">0.5</system:Double>

    <Style x:Key="Spin" TargetType="icons:MaterialIcon">
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                            From="0" To="360" Duration="0:0:1"
                            RepeatBehavior="Forever" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform Angle="0" />
            </Setter.Value>
        </Setter>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <!-- Custom style for GroupBox with the key "FixedGroupBox" -->
    <Style x:Key="FixedGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource GroupBoxBorder}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush950}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="4"/>
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4"
                    Grid.Row="1"
                    Grid.RowSpan="3"
                    Grid.Column="0"
                    Grid.ColumnSpan="4"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="Transparent"
                    Background="{TemplateBinding Background}"/>
                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header"
                    Padding="6,0,6,0"
                    Grid.Row="0"
                    Grid.RowSpan="2"
                    Grid.Column="1">
                            <ContentPresenter ContentSource="Header" 
                                RecognizesAccessKey="True" />
                        </Border>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2"
                              Grid.Column="1"
                              Grid.ColumnSpan="2"
                              Margin="{TemplateBinding Padding}"/>
                        <Border CornerRadius="4"
                    Grid.Row="1"
                    Grid.RowSpan="3"
                    Grid.ColumnSpan="4"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}"
                              ConverterParameter="6">
                                    <Binding ElementName="Header"
                           Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                           Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                           Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Base Menu Style -->
    <Style x:Key="BaseMenuStyle" TargetType="{x:Type MenuBase}">
        <Setter Property="Background" Value="{DynamicResource Brush100}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush950}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu Style -->
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource BaseMenuStyle}"/>

    <!-- ContextMenu Style -->
    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource BaseMenuStyle}"/>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{DynamicResource Brush100}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush100}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush950}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border x:Name="templateRoot" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                                <Grid VerticalAlignment="Center">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="Icon" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="16" Height="16" Margin="3"/>
                                    <Path x:Name="GlyphPanel" Data="F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"/>
                                    <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="true" Margin="{TemplateBinding Control.Padding}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PlacementTarget="{Binding ElementName=templateRoot}">
                                        <Border x:Name="SubMenuBorder" Background="{DynamicResource Brush200}" BorderBrush="Transparent" BorderThickness="0" Padding="2">
                                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                        <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}" Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}" Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="templateRoot" Value="#3D26A0DA" Property="Border.Background"/>
                                    <Setter TargetName="templateRoot" Value="#FF26A0DA" Property="Border.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="templateRoot" Value="#FF707070" Property="TextElement.Foreground"/>
                                    <Setter TargetName="GlyphPanel" Value="#FF707070" Property="Shape.Fill"/>
                                </Trigger>
                                <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" Property="Canvas.Left"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>